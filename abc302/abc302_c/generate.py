#!/usr/bin/env python3
# usage: $ oj generate-input 'python3 generate.py'
# usage: $ oj generate-input --hack-actual=./a.out --hack-expected=./naive 'python3 generate.py' number_of_test_cases_you_want
import random
import string
def generate_random_string(length):
    # Create a string of all lowercase letters
    letters = string.ascii_lowercase
    # Generate a random string of the specified length
    random_string = ''.join(random.choice(letters) for i in range(length))
    return random_string

def generate_unique_random_strings(length, count):
    # Create a set to store unique strings
    unique_strings = set()
    letters = string.ascii_lowercase
    
    # Continue generating strings until the set contains 'count' unique strings
    while len(unique_strings) < count:
        random_string = ''.join(random.choice(letters) for i in range(length))
        unique_strings.add(random_string)
        
    return list(unique_strings)



def modify_string(s):
    # Randomly choose a position to modify
    pos = random.randint(0, len(s) - 1)
    # Randomly choose a new character different from the current one at the chosen position
    new_char = random.choice([c for c in string.ascii_lowercase if c != s[pos]])
    # Replace the character at the chosen position with the new character
    return s[:pos] + new_char + s[pos+1:]

def generate_similar_random_strings(length, num_strings):
    if num_strings <= 1:
        # If only one string is requested, just return a random string
        return [generate_random_string(length)]

    # Start with one random string
    unique_strings = [generate_random_string(length)]
    
    # Generate the rest of the strings, ensuring each differs by at least one character from a previous string
    while len(unique_strings) < num_strings:
        # Choose a string to modify
        base_string = random.choice(unique_strings)
        # Modify the chosen string
        new_string = modify_string(base_string)
        # Ensure the new string is unique before adding it to the list
        if new_string not in unique_strings:
            unique_strings.append(new_string)
        
    return unique_strings

# Example usage


# generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
def main():
    N = random.randint(2, 8)  # TODO: edit here
    M = random.randint(1, 5)  # TODO: edit here
    print(f"{N} {M}")
    similar_random_strings = generate_similar_random_strings(M, N)
    #x = generate_unique_random_strings(M, N)
    for _ in similar_random_strings:
        print(_)


if __name__ == "__main__":
    main()
